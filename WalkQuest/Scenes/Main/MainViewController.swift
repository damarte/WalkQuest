//
//  MainViewController.swift
//  WalkQuest
//
//  Created by David on 1/3/17.
//  Copyright (c) 2017 damarte. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit
import MapKit

protocol MainViewControllerInput
{
    func displaySomething(viewModel: Main.Something.ViewModel)
}

protocol MainViewControllerOutput
{
    func doSomething(request: Main.Something.Request)
}

class MainViewController: UIViewController, MainViewControllerInput, MKMapViewDelegate
{
    var output: MainViewControllerOutput!
    var router: MainRouter!
    
    @IBOutlet weak var mapView: MKMapView!
    
    // MARK: - Object lifecycle
    
    override func awakeFromNib()
    {
        super.awakeFromNib()
        MainConfigurator.sharedInstance.configure(viewController: self)
    }
    
    // MARK: - View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        
        doSomethingOnLoad()
        
        configureMap()
    }
    
    // MARK: - Event handling
    
    func doSomethingOnLoad()
    {
        // NOTE: Ask the Interactor to do some work
        
        let request = Main.Something.Request()
        output.doSomething(request: request)
    }
    
    func configureMap()
    {
        self.mapView.showsScale = false
        self.mapView.showsTraffic = false
        self.mapView.showsBuildings = false
        self.mapView.showsPointsOfInterest = false
        self.mapView.showsCompass = false
        self.mapView.delegate = self
        self.mapView.showsUserLocation = true
        self.mapView.isScrollEnabled = false
        self.mapView.isPitchEnabled = false
        self.mapView.isZoomEnabled = false
        self.mapView.add(TileOverlay(), level: .aboveLabels)
    }
    
    // MARK: - Display logic
    
    func displaySomething(viewModel: Main.Something.ViewModel)
    {
        // NOTE: Display the result from the Presenter
        
        // nameTextField.text = viewModel.name
    }
    
    // MARK: - MKMapViewDelegate
    
    func mapView(_ mapView: MKMapView, rendererFor overlay: MKOverlay) -> MKOverlayRenderer {
        if let tileOverlay = overlay as? MKTileOverlay {
            return MKTileOverlayRenderer(tileOverlay: tileOverlay)
        }
        else{
            return MKTileOverlayRenderer()
        }
    }
    
    func mapViewWillStartLocatingUser(_ mapView: MKMapView) {
        let camera = MKMapCamera()
        camera.centerCoordinate = mapView.userLocation.coordinate
        camera.pitch = 40.0
        camera.altitude = 10.0
        if let heading = self.mapView.userLocation.heading {
            camera.heading = heading.magneticHeading
        }
        mapView.setCamera(camera, animated: false)
        mapView.setUserTrackingMode(.followWithHeading, animated: true)
    }
    
    func mapView(_ mapView: MKMapView, didUpdate userLocation: MKUserLocation) {
        //if let location = userLocation.location, location.horizontalAccuracy <= 200, location.verticalAccuracy <= 200 {
            //mapView.setCenter(mapView.userLocation.coordinate, animated: true)
            
            //camera.centerCoordinate = mapView.centerCoordinate
            //self.mapView.camera.centerCoordinate = mapView.userLocation.coordinate
            /*camera.pitch = 40.0
            camera.altitude = 100.0
            if let heading = mapView.userLocation.heading {
                camera.heading = heading.magneticHeading
            }
            mapView.setCamera(camera, animated: false)*/
        //}
        
        //let userLocation = mapView.userLocation
        /*let latitude = userLocation.coordinate.latitude
        let longitude = userLocation.coordinate.longitude
        let latDelta: CLLocationDegrees = 0.005
        let lonDelta: CLLocationDegrees = 0.005
        let span:MKCoordinateSpan = MKCoordinateSpanMake(latDelta, lonDelta)
        let location: CLLocationCoordinate2D = CLLocationCoordinate2DMake(latitude, longitude)
        let region: MKCoordinateRegion = MKCoordinateRegionMake(location, span)
        mapView.setRegion(region, animated: true)
        mapView.setCamera(self.camera, animated: false)
        mapView.showsUserLocation = true*/
        
        /*let camera = MKMapCamera()
        camera.centerCoordinate = userLocation.coordinate
        camera.pitch = 40.0
        camera.altitude = 200.0
        if let heading = self.mapView.userLocation.heading {
            camera.heading = heading.magneticHeading
        }
        mapView.setCamera(camera, animated: true)*/
        
        
        
        /*self.camera.centerCoordinate = mapView.centerCoordinate

        if let heading = mapView.userLocation.heading {
            self.camera.heading = heading.magneticHeading
        }
        
        mapView.setCamera(self.camera, animated: false)*/
    }
}
